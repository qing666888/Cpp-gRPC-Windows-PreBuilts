# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Steps toDo:
# 
# Trigger-Events
# (o) on new tags
# Required Build-Tooling
# (x/o) Visual Studio 2019(x) with C++ packages installed
# (o) Visual Studio 2015(x) with C++ packages installed (possible to have multipe versions?)
# (o) Visual Studio 2015(x) with C++ packages installed (possible to have multipe versions?)
# (x/0) New enough CMake
# (o) NASM compiler
# (o) Golang compiler
# (o) Apply fixes
# (o) Build Test-Package
# (o) Build Release-Package
# (o) Update Documentation

trigger:
- master

pool:
  vmImage: windows-2022
workspace:
      clean: all
steps:
# - script: |
#     choco install nasm -y
#   displayName: 'Install dependencies'

# - pwsh: |
#         $oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
#         $newpath = "C:\Program Files\NASM;$oldpath" 
#         Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newpath
# - pwsh: |
#     $NewPathInRegistry = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
#     Write-Host $NewPathInRegistry
    
# - script: |
#     cmake --version
#     python --version
#     go version
#   displayName: 'Show information build tools'

- script: |
     git clone --depth=1 -b v1.47.0 https://github.com/grpc/grpc
     md _out
     dir $(Build.SourcesDirectory)
  displayName: '[Git] Checkout Sources'

- script: |
    git submodule update --init --depth=1
    md _mybuild
  workingDirectory: $(Build.SourcesDirectory)/grpc
  displayName: '[Git] Get submodules'

- task: CMake@1
  displayName: '[CMake] Configure'
  inputs:
      workingDirectory: $(Build.SourcesDirectory)/grpc/_mybuild
      cmakeArgs: .. -G "Visual Studio 17 2022" -A x64 -DABSL_ENABLE_INSTALL:BOOL=ON -DCARES_STATIC_PIC:BOOL=ON -DRE2_BUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)\_out -DCMAKE_BUILD_TYPE=Debug -DLIBRARY_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out\lib -DEXECUTABLE_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out\bin -DCMAKE_SYSTEM_VERSION=10.0.19041
- script: |
    dir $(Build.SourcesDirectory)\grpc\_mybuild
- task: MSBuild@1
  displayName: '[MSBuild] Build Project'
  inputs:
    solution: '$(Build.SourcesDirectory)/grpc/_mybuild/ALL_BUILD.vcxproj'
    maximumCpuCount: true
    platform: 'x64'
    configuration: 'Debug'
- task: MSBuild@1
  displayName: '[MSBuild] Install missing sources'
  inputs:
    solution: '$(Build.SourcesDirectory)/grpc/_mybuild/INSTALL.vcxproj'
    maximumCpuCount: true
    platform: 'x64'
    configuration: 'Debug'
- task: ArchiveFiles@2
  displayName: '[Zipping] Compress all together'
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/_out'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
- task: PublishBuildArtifacts@1
  displayName: '[Publish] Archive and publish to Azure'
  inputs:
     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
     ArtifactName: vs2022_x64_debug