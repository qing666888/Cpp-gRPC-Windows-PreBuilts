# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Steps toDo:
# 
# Trigger-Events
# (o) on new tags
# Required Build-Tooling
# (x/o) Visual Studio 2019(x) with C++ packages installed
# (o) Visual Studio 2015(x) with C++ packages installed (possible to have multipe versions?)
# (o) Visual Studio 2015(x) with C++ packages installed (possible to have multipe versions?)
# (x/0) New enough CMake
# (o) NASM compiler
# (o) Golang compiler
# (o) Apply fixes
# (o) Build Test-Package
# (o) Build Release-Package
# (o) Update Documentation

trigger:
- master

pool:
  vmImage: windows-2019

steps:
# - script: |
#     choco install nasm -y
#   displayName: 'Install dependencies'

# - pwsh: |
#         $oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
#         $newpath = "C:\Program Files\NASM;$oldpath" 
#         Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newpath
# - pwsh: |
#     $NewPathInRegistry = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
#     Write-Host $NewPathInRegistry
    
# - script: |
#     cmake --version
#     python --version
#     go version
#   displayName: 'Show information build tools'

- script: |
    git clone --depth=1 -b v1.47.0 https://github.com/grpc/grpc
    dir $(Build.SourcesDirectory)
    displayName: 'Checkout Sources'

- script: git submodule update --init --depth=1
  workingDirectory: $(Build.SourcesDirectory)/grpc
  displayName: "Get submodules"
  #failOnStderr: #
 # env: { string: string } # mapping of environment variables to add

#cd grpc
#
  
# - script: |
#     cd grpc
#     md build
#     md out
#     cd build
#     cmake .. -G "Visual Studio 16 2019" -A x64  -DABSL_ENABLE_INSTALL:BOOL=ON -DCARES_STATIC_PIC:BOOL=ON -DRE2_BUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=../out -DCMAKE_BUILD_TYPE=Debug -DLIBRARY_OUTPUT_PATH:PATH=../out/lib -DEXECUTABLE_OUTPUT_PATH:PATH=../out/bin
#     cmake --build . --config Debug --target install
#   displayName: 'Run build'
