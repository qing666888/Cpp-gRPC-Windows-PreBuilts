# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Steps toDo:
# 
# Trigger-Events
# (o) on new tags
# Required Build-Tooling
# (x/o) Visual Studio 2019(x) with C++ packages installed
# (o) Visual Studio 2015(x) with C++ packages installed (possible to have multipe versions?)
# (o) Visual Studio 2015(x) with C++ packages installed (possible to have multipe versions?)
# (x/0) New enough CMake
# (o) NASM compiler
# (o) Golang compiler
# (o) Apply fixes
# (o) Build Test-Package
# (o) Build Release-Package
# (o) Update Documentation

trigger:
- master

pool:
  vmImage: windows-2019

steps:
# - script: |
#     choco install nasm -y
#   displayName: 'Install dependencies'

# - pwsh: |
#         $oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
#         $newpath = "C:\Program Files\NASM;$oldpath" 
#         Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newpath
# - pwsh: |
#     $NewPathInRegistry = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
#     Write-Host $NewPathInRegistry
    
# - script: |
#     cmake --version
#     python --version
#     go version
#   displayName: 'Show information build tools'

- script: |
     git clone --depth=1 -b v1.47.0 https://github.com/grpc/grpc
     md _out
     dir $(Build.SourcesDirectory)
  displayName: 'Checkout Sources'

- script: |
    git submodule update --init --depth=1
    md _mybuild
  workingDirectory: $(Build.SourcesDirectory)/grpc
  displayName: 'Get submodules'

# - script: |
#     cmake .. -G "Visual Studio 16 2019" -A x64  -DABSL_ENABLE_INSTALL:BOOL=ON -DCARES_STATIC_PIC:BOOL=ON -DRE2_BUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)\_out -DCMAKE_BUILD_TYPE=Debug -DLIBRARY_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out/lib -DEXECUTABLE_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out/bin
#   workingDirectory: $(Build.SourcesDirectory)/grpc/_mybuild
#   displayName: 'CMake-Configuration'

# - script: |
#     cmake --build . --config Debug --target install
#   workingDirectory: c
#   displayName: 'CMake-Build'
  #failOnStderr: #
 # env: { string: string } # mapping of environment variables to add

- task: CMake@1
  inputs:
      workingDirectory: $(Build.SourcesDirectory)/grpc/_mybuild
      cmakeArgs: '-A x64 -DABSL_ENABLE_INSTALL:BOOL=ON -DCARES_STATIC_PIC:BOOL=ON -DRE2_BUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=$(Build.SourcesDirectory)\_out -DCMAKE_BUILD_TYPE=Debug -DLIBRARY_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out\lib -DEXECUTABLE_OUTPUT_PATH:PATH=$(Build.SourcesDirectory)\_out\bin -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 ..'
- script: |
    dir $(Build.SourcesDirectory)\grpc\_mybuild
- task: MSBuild@1
  inputs:
    solution: '$(Build.SourcesDirectory)/grpc/_mybuild/ALL_BUILD.vcxproj'
    maximumCpuCount: true
    platform: 'x64'
    configuration: 'Debug'
#cd grpc
#
  
# - script: |
#     cd grpc
#     md build
#     md out
#     cd build
#     cmake .. -G "Visual Studio 16 2019" -A x64  -DABSL_ENABLE_INSTALL:BOOL=ON -DCARES_STATIC_PIC:BOOL=ON -DRE2_BUILD_TESTING:BOOL=OFF -DCMAKE_INSTALL_PREFIX=../out -DCMAKE_BUILD_TYPE=Debug -DLIBRARY_OUTPUT_PATH:PATH=../out/lib -DEXECUTABLE_OUTPUT_PATH:PATH=../out/bin
#     
#   displayName: 'Run build'
